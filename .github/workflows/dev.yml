name: Deploy to Amazon ECS

on:
  push:
    branches: 
      - "dev"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        app: [backend, frontend]

    env:
      AWS_REGION: ${{ secrets.MY_AWS_REGION }}                 # set this to your preferred AWS region, e.g. us-west-1
      ECR_REPOSITORY: ${{ secrets.MY_ECR_REPOSITORY }}            # set this to your Amazon ECR repository name
      ECS_SERVICE: ${{ secrets.MY_ECS_SERVICE }}                  # set this to your Amazon ECS service name
      ECS_CLUSTER: ${{ secrets.MY_ECS_CLUSTER }}                  # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: ${{ secrets.MY_ECS_TASK_DEFINITION }}  # set this to the path to your Amazon ECS task definition
                                                  # file, e.g. .aws/task-definition.json


    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY-${{ matrix.app }}:dev-$IMAGE_TAG -f ${{ matrix.app }}.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-${{ matrix.app }}::dev-$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY-${{ matrix.app }}::dev-$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
          NODE_ENV = production
          PORT = 5000
          MONGO_URI = ${{ secrets.DB_URI }} 
          JWT_SECRET = ${{ secrets.JWT_SECRET }} 

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
